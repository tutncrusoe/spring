package com.example.di_ioc;

/**
 * #2
 */
interface ShapeInterface {
    void printShape();
}

/**
 * RectangleImpl la` 1 abstract class.
 */
class RectangleImpl implements ShapeInterface {
    @Override
    public void printShape() {
        System.out.println("Rectangle");
    }
}

public class BottleDI {
    /**
     * Bay gio, ShapeDI chi phu thuoc vao Shape.
     * Neu muon thay doi, ta chi can mot ShapeImpl khac.
     */
    private ShapeInterface shapeInterface;

    /**
     * BottleDI van bi gan' voi mot Rectangle duy nhat.
     * Khong the thay the bang ShapeImpl khac'.
     */
    public BottleDI() {
        this.shapeInterface = new RectangleImpl();
    }

    /**
     * V·∫≠y mu·ªën thay doi hinh dang cho bottleDI, b·∫°n ph·∫£i l√†m nh∆∞ sau.
     * Chung ta da~ tach duoc RectangleImpl ra hoan toan khoi Bottle.
     * Dieu nay` lam` giam su phu thuoc giua Bottle va` RectangleImpl.
     * Lam` tang tinh tuy` bien, linh hoat cho code.
     */
    public BottleDI(ShapeInterface shapeInterface) {
        this.shapeInterface = shapeInterface;
    }
}

class Main {
    public static void main(String[] args) {
        // Tao ra mot doi tuong RectangleImpl
        ShapeInterface rectangle = new RectangleImpl();
//        ColorInterface color = new Red();
//        MaterialInterface material = new Plastic();

        // Inversion of Control
        /**
         * Dependency Injection gi√∫p ch√∫ng ta d·ªÖ d√†ng m·ªü r·ªông code v√† gi·∫£m s·ª± ph·ª• thu·ªôc gi·ªØa c√°c dependency v·ªõi nhau.
         * Tuy nhi√™n, l√∫c n√†y, khi code b·∫°n s·∫Ω ph·∫£i ki√™m th√™m nhi·ªám v·ª• Inject dependency (ti√™m s·ª± ph·ª• thu·ªôc).
         * Th·ª≠ t∆∞·ªüng t∆∞·ª£ng m·ªôt Class c√≥ h√†ng ch·ª•c dependency th√¨ b·∫°n s·∫Ω ph·∫£i t·ª± tay inject t·ª´ng √Ω c√°i.
         * Vi·ªác n√†y l·∫°i d·∫´n t·ªõi kh√≥ khƒÉn trong vi·ªác code, qu·∫£n l√Ω code v√† dependency
         *
         * Gi√° nh∆∞ l√∫c n√†y c√≥ th·∫±ng l√†m h·ªô ƒë∆∞·ª£c ch√∫ng ta vi·ªác n√†y th√¨ t·ªët bi·∫øt m·∫•y. Vay thi` tim hieu BottleIoC cung` minh` nhe/
         */

        /**
         * Bay gio, BottleDI se hoat dong voi RectangleImpl.
         */
        BottleDI bottleDI = new BottleDI(rectangle);
    }
    /**
     * Bay gio muon BottleDI co shape ntn, ban chi can create one ShapeImpl implements ShapeInterface
     * va` Inject va`o trong BottleDI is done.
     *
     * C√°c c√°ch ƒë·ªÉ Inject dependency v√†o m·ªôt ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ k·ªÉ ƒë·∫øn nh∆∞ sau:
     *
     * Constructor Injection: C√°i n√†y ch√≠nh l√† v√≠ d·ª• c·ªßa m√¨nh, ti√™m dependency ngay v√†o Contructor cho ti·ªán.
     *
     * Setter Injection: ·ªí, sao kh√¥ng ch·ª© üòó ch√∫ng ta h·ªçc v·ªÅ Setter t·ª´ nh·ªØng b√†i h·ªçc v·ª° l√≤ng r·ªìi, qu√° h·ª£p l√Ω.
     * X√†i bottleDI.setShapeInterface(new ShapeImpl()) üòà
     *
     * Interface Injection: M·ªói Class mu·ªën inject c√°i g√¨, th√¨ ph·∫£i implement m·ªôt Interface c√≥ ch·ª©a m·ªôt h√†m inject(xx) (G·∫ßn nh∆∞ thay th·∫ø cho setter √Ω b·∫°n).
     * R·ªìi b·∫°n mu·ªën inject g√¨ ƒë√≥ th√¨ g·ªçi c√°i h√†m inject(xx) ra. C√°ch n√†y h∆°i d√†i v√† kh√≥ cho ng∆∞·ªùi m·ªõi.
     */
}
